package com.groq.sdk.models.chat;

import java.util.List;

import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Represents a single message in a chat conversation.
 * Contains the role (user, assistant, system, tool) and content of the message.
 * 
 * <p><strong>Supported roles:</strong></p>
 * <ul>
 *   <li><code>system</code> - System messages that set the behavior of the assistant</li>
 *   <li><code>user</code> - Messages from the user</li>
 *   <li><code>assistant</code> - Messages from the assistant</li>
 *   <li><code>tool</code> - Messages containing tool responses</li>
 * </ul>
 * 
 * @author Debajit Kumar Phukan
 * @since 25-Aug-2025
 * @version 1.0.0
 * @see ChatCompletionRequest
 * @see ChatToolCall
 */
public class ChatMessage {
    private String role;
    private String content;
    private String name;
    
    @JsonProperty("tool_calls")
    private List<ChatToolCall> toolCalls;
    
    @JsonProperty("tool_call_id")
    private String toolCallId;
    
    /**
     * Default constructor.
     */
    public ChatMessage() {}
    
    /**
     * Constructs a new ChatMessage with the specified role and content.
     * 
     * @param role the role of the message sender (system, user, assistant, or tool)
     * @param content the message content
     */
    public ChatMessage(String role, String content) {
        this.role = role;
        this.content = content;
    }
    
    /**
     * Constructs a new tool message with tool call ID.
     * 
     * @param toolCallId the ID of the tool call this message responds to
     * @param content the tool response content
     */
    public static ChatMessage createToolMessage(String toolCallId, String content) {
        ChatMessage message = new ChatMessage("tool", content);
        message.setToolCallId(toolCallId);
        return message;
    }
    
    /**
     * Gets the role of the message sender.
     * 
     * @return the role (system, user, assistant, or tool)
     */
    public String getRole() { 
        return role; 
    }
    
    /**
     * Sets the role of the message sender.
     * 
     * @param role the role (system, user, assistant, or tool)
     */
    public void setRole(String role) { 
        this.role = role; 
    }
    
    /**
     * Gets the content of the message.
     * 
     * @return the message content
     */
    public String getContent() { 
        return content; 
    }
    
    /**
     * Sets the content of the message.
     * 
     * @param content the message content
     */
    public void setContent(String content) { 
        this.content = content; 
    }
    
    /**
     * Gets the optional name of the message sender.
     * 
     * @return the sender's name, or null if not set
     */
    public String getName() { 
        return name; 
    }
    
    /**
     * Sets the optional name of the message sender.
     * 
     * @param name the sender's name
     */
    public void setName(String name) { 
        this.name = name; 
    }
    
    /**
     * Gets the tool calls generated by the model (for assistant messages).
     * 
     * @return the list of tool calls, or null if not set
     */
    public List<ChatToolCall> getToolCalls() { 
        return toolCalls; 
    }
    
    /**
     * Sets the tool calls generated by the model (for assistant messages).
     * 
     * @param toolCalls the list of tool calls
     */
    public void setToolCalls(List<ChatToolCall> toolCalls) { 
        this.toolCalls = toolCalls; 
    }
    
    /**
     * Gets the tool call ID (for tool messages).
     * 
     * @return the tool call ID, or null if not set
     */
    public String getToolCallId() { 
        return toolCallId; 
    }
    
    /**
     * Sets the tool call ID (for tool messages).
     * 
     * @param toolCallId the tool call ID
     */
    public void setToolCallId(String toolCallId) { 
        this.toolCallId = toolCallId; 
    }
}